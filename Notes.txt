//13
Main ideas of js:
It is also called MVC 
1 (Model) save data == in objects, key-value pairs or in array or string
2 (View) generate HTML == 2. using arrow functions to find matching,
       1. get code from .html like divs to generate html,  
       3. use dom to put it into web page. 
       for dom use/add/create another class 
 2.1 combine this html together
 2.2 put it on web page(using dom)
3 (Controller) Make it interactive = add class name to make interactive
            then use doc.queselectall(.js-newclassadded)
  3.1 how do we know which prdct to add?
  data attribute : is just another HTML attribute
  it allows us to attach any information to an element

  syntax for a data attribut:
  is just an HTML attribute
  it have to start with "data-"
  then give it any name

  name              value
  data-prdct-name="${prdct.name}">



  steps:
  1. check if the prdct is already in the cart
  2. if it is in the cart, increase the quantity
  3.if it is not in thecart, add it to the cart.

  steps to make cart button interactive:
  1. calculate quantity
  2. put quantity on the page

//14
to avoid naming conflicts we create Module

Create a Module:
1. create a file
2. Dont load the file with <script>

Any variables we create inside the file, 
will be contained inside the file

-Get a variable out of a file:
1.Add type="module" attribute
2. Export
3. Import

--Benefits of Module:
1.avoid naming conflicts
2. dont have to worry about order of files
3. using modules we can reuse a lot of code and reduce complexions
  (Here-formatCurrency function in scripts/utils/money.js used in shopnow.js and checkout.js)


==Group related code together into its own file

--import * as cartModule from'../data/cart.js';
it imports everything from cart.js
cartModule.cart
cartModule.addToCarr('id')

for deleting a product from cart:
1.remove product from cart(ds)(added attribute data-product-id=matchingproduct.id
   in checkout.js delete section to know which prdct we have to delete)
2.update our HTML

=Now,after finding productId how to remove productId from cart:
Follow below steps:
this code is in cart.js bcz everything related to prdct info is in cart.js
created fun removeFromCart
1.create new array
2.loop through cart
3.add each prdct to new array except for this productId


2=Update HTML steps:
1. use dom to get the element to remove
2. use .remove() method


//chapter - 15

why we use external libraries:
external libraries are code in the internet

1. let us share code
2. save time
3. avoid duplicating work

eg: To get these dates(in delivery option):
1. get today's date
2. do calculations(7 days, 3 days....)
3. display the date in easy-to-read format

==Best pracice for coding is:
when we need something complicated,
-Try to find an external library first.
-Before writing the code ourselves.

==How to find external libraries:
search in google or chatgpt eg: javascript date library.


==External libraries+js modules together:
--for this we use a special version of library caled an "ESM version"
ESM=EcmaScript Module it is another name of js => ESM=js
ESM Version: A version that works with javascript modules

==Default export:

eg:import dayjs from 'https://unpkg.com/dayjs@1.11.10/esm/index.js';

here there is no curly brace({}) for dayjs=it is default export

-default export:
-another way of exporting
-we can use it when we only want to export 1 thing

==js code;
save data(deliveryid,price,id in a ds)
generate html=created a function deliveryOptionsHTML in vheckout.js
then steps
2.1 loop through deliveryOptions
2.2 for each option, generate some html
2.3 combine all the html together

3. Make it interactive(js):
1. Update deliveryOptionId in the cart
2. Update page

3.1.1=>  create func updateDeliveryOption needs prdctid, deliveryOptionId
    steps: 1.loop through cart and find product
           2.update deliveryOptionId of prdct

MVC (Model-view-control):
split our code into 3 parts
1.model = saves and manages the data(cart.js here)
2.view = takes the data and displays it on the page (checkout.js here)
3.controller = runs some code when we interact with the page.(event listeners in checkout.js)

MVC=makes sure the page always matches the data
MVC is a design pattern-its a way to organize and design our code.

Paymentsummary.js:
1. save data
steps:
1. loop through data
2. for each prdct, price*quantity
3. add everything together

=> NOTE : MVC makes sure that the HTML always matches the data or 
that the view always matches the model.

//chap 16

Disadvantages of Manual Testing:
1. hard to test every situation
2. hard to re-test

=> Automated Testing = using code to test code.

= > 2 types of Test cases
1. Basic test cases = test if the code is working.
2. Edge case = test withvalues that are tricky.

= > Group of related tests = test suite 

//Chapter 17 : Testing Framework :

Testing Framework = external library that helps us write tests easier.

for this:
1. create test suite
2. create tests
3. compare values and display result

= > **Testing framework used here is : Jasmine

In jasmine spec is another name for test (spec=test)

1.create test suite
2.create tests
3.compare values and display result

=> describe()= func used to create test suite in jasmine framework
=> it()= it is used to create a test

Test Coverage = how much of the code is being tested.

//chapter 17 OOPS:

OOPS : organize the code into objects

Method=Function inside an object

why we use oops?
ITtries to represent the real world.
Easy to create multiple objects

=>Better way to create multiple objects is :
Create a function that generates objects.

js has a shortcut for method called "shorthand method syntax" :

eg: loadFromStorage(){

}

is shortcut method for loadFromStorage: function(){}

//chapter 18 Classes

An even better way to generate objects = class

oop has a feature called "class". 
class is specifically designed for generating objects.

class=Object generator

oop=organizing our code into objects
(tries to represent the real world)

class=helps us generate those objects
(object generator)

benefits of class:
a class looks like the object that it generates.
cleaner than using a function
classes have extra features for oop

=> Constructor = let us run setup code

more details about constructor:
1.method has to be named "constructor"
2.should not return anything.

==> chapter 17(Inheritance):

It lets us reuse code between classes.

=>"this" lets an object access its own properties.

==> Summary of "this":
1. inside a method,"this" points to the outer object
2. inside a function, this=undefined, but we can change it.
3. Arrow functions,do not change the value of "this"


==> chapter(18) Backend:
backend: another computer that manages the data of a website

URL=UNIFORM RESOURCE LOCATOR:
-like an address, but for the internet.
-helps us locate another computer on the internet.


==> chapter 19 (promises):
--better way yo handle asynchronous code
-- similar to done() function
-- let us wait for some code to finish, before going to the next step.

promise is an inbuilt class. so, when we create a promise we need to give it to a function.
so, when we create a promise. It's going to run this function immediately.

= resolve is a function
- similar to done() function.
- let us control when to go to the next step.

=> promises are designed bcz, it allows js to do multiple
things at the same time.

here, resolve() let us contrl when we go to the next step.
we use resolve() to wait for each step to finish before going to the next step.

=>* why do we use promise?
-- used inplace of callbacks..multiple callbacks cause a lot of nesting.
-- promises lets us to flatten our code. so, use promises instead of callbacks.

=>* we can run multiple promises at the same time.=(promise.all())

=> Promise.all():
-lets us run multiple promises at the same time.
-and wait for all of them to finish.

=> fetch()=better way to make HTTP requests.

=>response.json() is asynchronous, it returns a promise.

==> chapter 20(Async Await):
= even better way to handle asynchronous code.
= Async await is a shortcut for promises.
= async(keyword) = makes a function return a promise.

=*  what is the point of this feature?
=asyn lets us use await
= await = lets us wait for a promise to finish,
 before going to the next line.
 and await = lets us write asynchronous code like normal code.

*= we can only use await, when we are inside an async function.
=* async await can only be used with promises.

==> More details about async await:
we can only use await, inside an async function.

The closest function has to be async.

=> Error Handling:

When we are sending HTTP requests, we could get unexpected errors.

= set up a separate callback just for errors.

=> Handle errors in asyn await.

reject() is a function
- it lets us create an error in the future.

To send data in a request, we need to use a different type of request.

4 types of Requests:

GET = get something from backend

POST = create something 
PUT = update something 
DELETE = delete something 

