//13
Main ideas of js:

1 save data == in objects, key-value pairs or in array or string
2 generate HTML == 2. using arrow functions to find matching,
       1. get code from .html like divs to generate html,  
       3. use dom to put it into web page. 
       for dom use/add/create another class 
 2.1 combine this html together
 2.2 put it on web page(using dom)
3 Make it interactive = add class name to make interactive
            then use doc.queselectall(.js-newclassadded)
  3.1 how do we know which prdct to add?
  data attribute : is just another HTML attribute
  it allows us to attach any information to an element

  syntax for a data attribut:
  is just an HTML attribute
  it have to start with "data-"
  then give it any name

  name              value
  data-prdct-name="${prdct.name}">



  steps:
  1. check if the prdct is already in the cart
  2. if it is in the cart, increase the quantity
  3.if it is not in thecart, add it to the cart.

  steps to make cart button interactive:
  1. calculate quantity
  2. put quantity on the page

//14
to avoid naming conflicts we create Module

Create a Module:
1. create a file
2. Dont load the file with <script>

Any variables we create inside the file, 
will be contained inside the file

-Get a variable out of a file:
1.Add type="module" attribute
2. Export
3. Import

--Benefits of Module:
1.avoid naming conflicts
2. dont have to worry about order of files
3. using modules we can reuse a lot of code and reduce complexions
  (Here-formatCurrency function in scripts/utils/money.js used in shopnow.js and checkout.js)


==Group related code together into its own file

--import * as cartModule from'../data/cart.js';
it imports everything from cart.js
cartModule.cart
cartModule.addToCarr('id')

for deleting a product from cart:
1.remove product from cart(ds)(added attribute data-product-id=matchingproduct.id
   in checkout.js delete section to know which prdct we have to delete)
2.update our HTML

=Now,after finding productId how to remove productId from cart:
Follow below steps:
this code is in cart.js bcz everything related to prdct info is in cart.js
created fun removeFromCart
1.create new array
2.loop through cart
3.add each prdct to new array except for this productId


2=Update HTML steps:
1. use dom to get the element to remove
2. use .remove() method


//chapter - 15

why we use external libraries:
external libraries are code in the internet

1. let us share code
2. save time
3. avoid duplicating work

eg: To get these dates(in delivery option):
1. get today's date
2. do calculations(7 days, 3 days....)
3. display the date in easy-to-read format

==Best pracice for coding is:
when we need something complicated,
-Try to find an external library first.
-Before writing the code ourselves.

==How to find external libraries:
search in google or chatgpt eg: javascript date library.


==External libraries+js modules together:
--for this we use a special version of library caled an "ESM version"
ESM=EcmaScript Module it is another name of js => ESM=js
ESM Version: A version that works with javascript modules

==Default export:

eg:import dayjs from 'https://unpkg.com/dayjs@1.11.10/esm/index.js';

here there is no curly brace({}) for dayjs=it is default export

-default export:
-another way of exporting
-we can use it when we only want to export 1 thing

==js code;
save data(deliveryid,price,id in a ds)
generate html=created a function deliveryOptionsHTML in vheckout.js
then steps
2.1 loop through deliveryOptions
2.2 for each option, generate some html
2.3 combine all the html together